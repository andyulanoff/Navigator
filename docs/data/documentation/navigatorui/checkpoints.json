{"kind":"article","sections":[],"metadata":{"title":"Checkpoints","modules":[{"name":"NavigatorUI"}],"role":"article","roleHeading":"Article"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Checkpoints"},"schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/NavigatorUI\/documentation\/NavigatorUI"]]},"abstract":[{"type":"text","text":"Navigation Checkpoints allow one to return to a specific waypoint in the navigation tree."}],"seeAlsoSections":[{"title":"The Basics","anchor":"The-Basics","generated":true,"identifiers":["doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/NavigationTree","doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Destinations","doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Dismissible"]}],"primaryContentSections":[{"content":[{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like most systems based on NavigationStack, Navigator supports operations like popping back to a previous view, dismissing a presented view, and so on."}]},{"syntax":"swift","type":"codeListing","code":["Button(\"Pop To Previous Screen\") {","    navigator.pop()","}","Button(\"Dismiss Presented View\") {","    navigator.dismiss()","}"]},{"inlineContent":[{"text":"But those are all imperative operations. While one can programmatically pop and dismiss their way out of a screen, that approach is problematic and tends to be fragile. It also assumes that the code has explicit knowledge of the application structure and navigation tree.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"One could pass bindings down the tree, but that can also be cumbersome and difficult to maintain."}]},{"inlineContent":[{"text":"Fortunately, Navigator supports checkpoints; named points in the navigation stack to which one can easily return.","type":"text"}],"type":"paragraph"},{"text":"Examples","type":"heading","anchor":"Examples","level":2},{"text":"Defining a Checkpoint","type":"heading","anchor":"Defining-a-Checkpoint","level":3},{"inlineContent":[{"type":"text","text":"Checkpoints are easy to define and use. Let’s create one called “home”."}],"type":"paragraph"},{"syntax":"swift","code":["struct KnownCheckpoints: NavigationCheckpoint {","    public static var home: NavigationCheckpoint<Void> { checkpoint() }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Just conform your definitions to ","type":"text"},{"type":"codeVoice","code":"NavigationCheckpoints"},{"type":"text","text":" and specify the return type of the checkpoint (or void if none)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using "},{"code":"{ checkpoint() }","type":"codeVoice"},{"type":"text","text":" ensures a checkpoint definition and name that’s unique. Here, that’s "},{"type":"codeVoice","code":"KnownCheckpoints.home.()"},{"type":"text","text":"."}]},{"text":"Establishing a Checkpoint","type":"heading","anchor":"Establishing-a-Checkpoint","level":3},{"type":"paragraph","inlineContent":[{"text":"Now lets attach that checkpoint to our home view.","type":"text"}]},{"type":"codeListing","code":["struct RootHomeView: View {","    var body: some View {","        ManagedNavigationStack(scene: \"home\") {","            HomeContentView(title: \"Home Navigation\")","                .navigationCheckpoint(KnownCheckpoints.home)","                .nbNavigationDestination(HomeDestinations.self)","        }","    }","}"],"syntax":"swift"},{"level":3,"type":"heading","text":"Returning to a Checkpoint","anchor":"Returning-to-a-Checkpoint"},{"type":"paragraph","inlineContent":[{"text":"Once defined, they’re easy to use.","type":"text"}]},{"syntax":"swift","code":["Button(\"Return To Checkpoint Home\") {","    navigator.returnToCheckpoint(KnownCheckpoints.home)","}",".disabled(!navigator.canReturnToCheckpoint(KnownCheckpoints.home))"],"type":"codeListing"},{"inlineContent":[{"text":"When fired, checkpoints will dismiss any presented screens and pop any pushed views to return exactly where desired.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Advanced Checkpoints","level":2,"anchor":"Advanced-Checkpoints"},{"type":"heading","level":3,"text":"Returning values to a Checkpoint","anchor":"Returning-values-to-a-Checkpoint"},{"inlineContent":[{"type":"text","text":"Checkpoints can also be used to return values to a caller."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"As before we define our checkpoint, specifying the return value type."}],"type":"paragraph"},{"type":"codeListing","code":["struct KnownCheckpoints: NavigationCheckpoint {","    public static var settings: NavigationCheckpoint<Int> { checkpoint() }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"We then establish our checkpoint, but this time we add a handler that receives our value type."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/ Define a checkpoint with a value handler.",".navigationCheckpoint(KnownCheckpoints.settings) { result in","    returnValue = result","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then later on when we’re ready to return we call "},{"code":"returnToCheckpoint","type":"codeVoice"},{"type":"text","text":" as usual, but in this case passing our return value as well."}]},{"syntax":"swift","code":["\/\/ Return, passing a value.","Button(\"Return to Settings Checkpoint Passing Value 5\") {","    navigator.returnToCheckpoint(KnownCheckpoints.settings, value: 5)","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The value type returned must match the checkpoint definition, otherwise you’ll get a compiler error."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Checkpoint return values come in handy when enabling state restoration in our navigation system, especially since view bindings and callback closures can’t be persisted to external storage."}]},{"type":"aside","style":"important","content":[{"inlineContent":[{"text":"The value types specified in the handler and sent by the return function must match. If they don’t then the handler will not be called.","type":"text"}],"type":"paragraph"}],"name":"Important"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Checkpoints are a powerful tool. Use them."}]}],"kind":"content"}],"variants":[{"paths":["\/documentation\/navigatorui\/checkpoints"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://NavigatorUI/documentation/NavigatorUI/Dismissible":{"abstract":[{"type":"text","text":"Understanding dismissible views and their role in application navigation and deep linking."}],"identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Dismissible","url":"\/documentation\/navigatorui\/dismissible","type":"topic","kind":"article","role":"article","title":"Dismissible Views"},"doc://NavigatorUI/documentation/NavigatorUI/Destinations":{"title":"Destinations","role":"article","type":"topic","url":"\/documentation\/navigatorui\/destinations","abstract":[{"type":"text","text":"All navigation in Navigator is accomplished using enumerated values that conform to the NavigationDestination protocol."}],"kind":"article","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Destinations"},"doc://NavigatorUI/documentation/NavigatorUI/NavigationTree":{"abstract":[{"type":"text","text":"To get the most out of Navigator you need to understand the navigation tree where its Navigators live."}],"identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/NavigationTree","url":"\/documentation\/navigatorui\/navigationtree","type":"topic","kind":"article","role":"article","title":"Understanding The Navigation Tree"},"doc://NavigatorUI/documentation/NavigatorUI":{"type":"topic","kind":"symbol","url":"\/documentation\/navigatorui","title":"NavigatorUI","role":"collection","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI","abstract":[{"text":"Managed NavigationStacks for SwiftUI.","type":"text"}]}}}
